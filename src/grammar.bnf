program         ::= statements_
                ;

statements_     ::= statement statements_
                | E
                ;

statement       ::= variable-def | type-def | return-stmt | expr
                ;

variable-def    ::= LET-KEYWORD_ IDENTIFIER EQUALS_ expr
                ;

type-def        ::= TYPE-KEYWORD_ IDENTIFIER TODO
                ;

return-stmt     ::= RETURN-KEYWORD_ expr
                | RETURN-KEYWORD_
                ;

expr            ::= expr_
                ;

expr_           ::= expr__ infix-operator expr_
                | expr__
                ;

expr__          ::= prefix-op operand
                | operand postfix-op
                | operand
                ;

operand         ::= if-expr
                | function-expr
                | OPEN-PAREN_ expr CLOSE-PAREN_
                | STRING
                | CHAR
                | NUMBER
                | IDENTIFIER
                | type
                ;

infix-operator  ::= GREATER-EQ | LESS-EQ | PLUS | MINUS | ASTERISK | SLASH | CARET | PERCENT | PERIOD | EQUALS-OP
                | NOT-EQUALS-OP | greater | less | AND | OR
                ;

greater         ::= CLOSE-CHEVRON_
                ;

less            ::= OPEN-CHEVRON_
                ;

prefix-op       ::= PLUS | MINUS | EXCL | SPREAD
                ;

postfix-op      ::= call-op
                ;

call-op         ::= OPEN-PAREN_ args CLOSE-PAREN_
                ;

args            ::= args_
                ;

args_           ::= expr COMMA_ args_
                | expr trailing-comma_
                | E
                ;

function-expr   ::= OPEN-PAREN_ params CLOSE-PAREN_ COLON_ type block
                ;

block           ::= OPEN-BRACE_ statements_ CLOSE-BRACE_
                | OPEN-BRACE_ CLOSE-BRACE_
                ;

params          ::= params_
                ;

params_         ::= param COMMA_ params_
                | param trailing-comma_
                | param
                | E
                ;

param           ::= IDENTIFIER COLON_ type
                ;

trailing-comma_ ::= COMMA_
                | E
                ;

type            ::= IDENTIFIER OPEN-CHEVRON_ type-params CLOSE-CHEVRON_
                | IDENTIFIER
                ;

type-params     ::= type-params_
                | E
                ;

type-params_    ::= type COMMA_ type-params_
                | type trailing-comma_
                | E
                ;

if-expr         ::= IF-KEYWORD_ expr block else-expr_
                ;

else-expr_      ::= ELSE-KEYWORD_ block
                | E
                ;
