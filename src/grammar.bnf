program         ::= statements
                ;

statements      ::= statement statements
                | statement
                ;

statement       ::= variable-def | type-def | return-stmt | expr
                ;

variable-def    ::= LET-KEYWORD IDENTIFIER EQUALS expr
                ;

type-def        ::= TYPE-KEYWORD IDENTIFIER TODO
                ;

return-stmt     ::= RETURN-KEYWORD expr
                | RETURN-KEYWORD
                ;

expr            ::= expr_
                ;

expr_           ::= expr__ infix-operator expr_
                | expr__
                ;

expr__          ::= prefix-op operand
                | operand postfix-op
                | operand
                ;

operand         ::= if-expr
                | function-expr
                | OPEN-PAREN expr CLOSE-PAREN
                | STRING
                | CHAR
                | NUMBER
                | IDENTIFIER
                | type
                ;

infix-operator  ::= PLUS | MINUS | ASTERISK | SLASH | CARET | PERCENT | PERIOD | EQUALS-OP | NOT-EQUALS-OP
                | CLOSE-CHEVRON | GREATER-EQ | OPEN-CHEVRON | LESS-EQ | AND | OR
                ;

prefix-op       ::= PLUS | MINUS | EXCL | SPREAD
                ;

postfix-op      ::= call-op
                ;

call-op         ::= OPEN-PAREN args CLOSE-PAREN
                ;

args            ::= args_
                ;

args_           ::= expr COMMA args_
                | expr trailing-comma
                | E
                ;

function-expr   ::= OPEN-PAREN params CLOSE-PAREN COLON type block
                ;

block           ::= OPEN-BRACE statements CLOSE-BRACE
                | OPEN-BRACE CLOSE-BRACE
                ;

params          ::= params_
                ;

params_         ::= param COMMA params_
                | param trailing-comma
                | param
                | E
                ;

param           ::= IDENTIFIER COLON type
                ;

trailing-comma  ::= COMMA
                | E
                ;

type            ::= IDENTIFIER OPEN-CHEVRON type-params CLOSE-CHEVRON
                | IDENTIFIER
                ;

type-params     ::= type COMMA type-params
                | type trailing-comma
                | type
                | E
                ;

if-expr         ::= IF-KEYWORD expr block ELSE-KEYWORD block
                | IF-KEYWORD expr block
                ;
