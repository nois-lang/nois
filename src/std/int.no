pub type Int

impl Int {
    pub fn mod(self, divisor: Self): Self {
        modInt(self, divisor)
    }
}

impl Num for Int {
    fn neg(self): Self {
        negInt(self)
    }

    fn abs(self): Self {
        absInt(self)
    }

    fn add(self, other: Self): Self {
        addInt(self, other)
    }

    fn sub(self, other: Self): Self {
        subInt(self, other)
    }

    fn mult(self, other: Self): Self {
        multInt(self, other)
    }

    fn div(self, other: Self): Self {
        divInt(self, other)
    }

    fn exp(self, other: Self): Self {
        expInt(self, other)
    }
}

impl Eq for Int {
    fn eq(self, other: Self): Bool {
        eqInt(self, other)
    }
}

impl Ord for Int {
    fn cmp(self, other: Self): Ordering {
        cmpInt(self, other)
    }
}

impl Show for Int {
    fn show(self): String {
        showInt(self)
    }
}

impl Trace for Int {
    fn trace(self): String {
        self.show()
    }
}

impl Copy for Int {
    fn copy(self): Self {
        copy(self)
    }
}

fn negInt(a: Int): Int

fn absInt(a: Int): Int

fn addInt(a: Int, b: Int): Int

fn addInt(a: Int, b: Int): Int

fn subInt(a: Int, b: Int): Int

fn multInt(a: Int, b: Int): Int

fn divInt(a: Int, b: Int): Int

fn expInt(a: Int, b: Int): Int

fn modInt(a: Int, b: Int): Int

fn eqInt(a: Int, b: Int): Bool

fn cmpInt(a: Int, b: Int): Ordering

fn showInt(a: Int): String

