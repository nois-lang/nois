use std::iter::{ MapAdapter, IntersperseAdapter }

pub type List<T>

impl <T> List<T> {
    pub fn at(self, index: Int): Option<T> {
        listAt(self, index)
    }

    pub fn add(self, item: T): Unit {
        listAdd(self, item)
    }
}

impl <T> Iterable<T> for List<T> {
    fn iter(self): Iter<T> {
        ListIter(list: self, index: 0)
    }
}

impl <T> Collector<T> for List<T> {
    fn fromIter(iter: Iter<T>): Self {
        let list = []
        while true {
            match iter.next() {
                Some(value) { list.add(value) }
                None() { break }
            }
        }
        list
    }
}

impl Show for List<String> {
    fn show(self): String {
        "[".concat(self.iter().intersperse(", ").collect<String>()).concat("]")
    }
}

impl Copy for Int {
    fn copy(self): Self {
        copy(self)
    }
}

impl <T: Show> Show for List<T> {
    fn show(self): String {
        // TODO: method ref
        self.iter().map(|d| { d.show() }).collect<List<String>>().show()
    }
}

pub type ListIter<T>(
    list: List<T>,
    // TODO: this logic breaks if list size changes during iteration.
    // Do something similar to Java's ConcurrentModificationException:
    // if eqRef(self.lastItem, self.list.at(self.index - 1)) { panic("list modified during iteration") }
    index: Int,
)

impl <T> Iter<T> for ListIter<T> {
    fn next(self): Option<T> {
        match self.list.at(self.index) {
            Some(value) {
                self.index = self.index + 1
                Some(value)
            }
            _ { None() }
        }
    }
}

fn listAt<T>(list: List<T>, index: Int): Option<T>

fn listAdd<T>(list: List<T>, item: T): Unit
