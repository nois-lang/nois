pub use std::iter::{
    intersperseIter::{ IntersperseIter, IntersperseAdapter },
    mapIter::{ MapIter, MapAdapter },
    peekable::{ PeekableIter, PeekableAdapter },
}

pub trait Iterable<T> {
    fn iter(self): Iter<T>
}

pub trait Iter<T> {
    fn next(self): Option<T>

    fn count(self): Int {
        self.fold(|acc, _| { acc + 1 }, 0)
    }

    fn last(self): Option<T> {
        let res = None()
        for item in self {
            res = Some(item)
        }
        return res
    }

    fn fold<U>(self, f: |U, T|: U, initial: U): U {
        let res = initial
        for item in self {
            res = f(res, item)
        }
        return res
    }

    fn position(self, f: |T|: Bool): Option<Int> {
        todo("Iter::position")
    }

    fn collect<C: Collector<T>>(self): C {
        C::fromIter(self)
    }
}

impl <T> Iterable<T> for Iter<T> {
    fn iter(self): Iter<T> {
        return self
    }
}

pub trait Collector<T> {
    fn fromIter<I: Iter<T>>(iter: I): Self
}
