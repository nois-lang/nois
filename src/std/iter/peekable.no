pub type PeekableIter<T>(
    iter: Iter<T>,
    peeked: Option<Option<T>>,
)

impl <T> Iter<T> for PeekableIter<T> {
    fn next(self): Option<T> {
        match self.peeked.take() {
            Some(value) { value }
            None() { self.iter.next() }
        }
    }

    fn peek(self): Option<T> {
        match self.peeked {
            Some(value) { value }
            None() {
                self.peeked = Some(self.iter.next())
                self.peeked
            }
        }
    }
}

pub trait PeekableAdapter<Self: Iter<T>, T> {
    fn peek(self): Option<T>
}

impl <T> PeekableAdapter<T> for Iter<T> {
    fn peek<U>(self): PeekableIter<T> {
        PeekableIter(iter: self, peeked: None())
    }
}

