pub type PeekableIter<T>(
    iter: Iter<T>,
    peeked: Option<Option<T>>
)

impl <T> PeekableIter<T> {
    pub fn peek(self): Option<T> {
        match self.peeked {
            Some(value) { value }
            None() {
                let n = self.next()
                self.peeked = Some(value: n)
                n
            }
        }
    }
}

impl <T> Iter<T> for PeekableIter<T> {
    fn next(self): Option<T> {
        match self.peeked {
            Some(value) { 
                self.peeked = None()
                value 
            }
            None() {
                self.iter.next()
            }
        }
    }
}

pub trait PeekableAdapter<T> {
    fn peekable(self): PeekableIter<T>
}

impl <T> PeekableAdapter<T> for Iter<T> {
    fn peekable(self): PeekableIter<T> {
        PeekableIter(iter: self, peeked: None())
    }
}

