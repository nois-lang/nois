use std::iter::{ PeekableIter, PeekableAdapter }

pub type IntersperseIter<T>(
    iter: PeekableIter<T>,
    separator: T,
    needsSeparator: Bool
)

impl <T> Iter<T> for IntersperseIter<T> {
    fn next(self): Option<T> {
        if self.needsSeparator {
            self.needsSeparator = false
            Some(self.separator)
        } else {
            let n = self.iter.next()
            self.needsSeparator = self.iter.peek().isSome()
            n
        }
    }
}

pub trait IntersperseAdapter<T> {
    fn intersperse(self, separator: T): Iter<T>
}

impl <T> IntersperseAdapter<T> for Iter<T> {
    fn intersperse(self, separator: T): Iter<T> {
        IntersperseIter(iter: self.peekable(), separator, needsSeparator: false)
    }
}

