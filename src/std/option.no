use std::unwrap::Unwrap

pub type Option<T> {
    Some(pub value: T),
    None
}

impl <T> Option<T> {
    pub fn map<U>(self, f: |T|: U): Option<U> {
        match self {
            Some(value) { Some(f(value)) }
            None() { self }
        }
    }

    pub fn isSome(self): Bool {
        match self {
            Some() { true }
            None() { false }
        }
    }

    pub fn isNone(self): Bool {
        self.isSome().not()
    }

    pub fn or(self, other: Option<T>): Option<T> {
        match self {
            Some() { self }
            None() { other }
        }
    }

    pub fn unwrap(self): T {
        match self {
            Some(value) { value }
            None() { panic("no value") }
        }
    }
}

impl <T> Unwrap<T> for Option<T> {
    fn bind(self): Option<T> {
        self
    }
}

impl <T: Trace> Trace for Option<T> {}

