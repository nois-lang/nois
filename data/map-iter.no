use std::iter

type MapIter<T, U>(
    iter: Iter<T>,
    f: |T|: U
)

trait MapAdapter<Self: Iter<T>, T> {
    fn map<U>(self, f: |T|: U): MapIter<T>
}

impl <T> MapAdapter for Iter<T> {
    fn map<U>(self, f: |T|: U): MapIter<T> {
        MapIter::MapIter(iter: self, f: f)
    }
}

impl <T> Iter<T> for MapIter<T> {
    fn next(self): Option<T> {
        self.next().map(self.f)
    }
}

fn main() {
    println([1, 2, 3].map(|i| i * 2))
}
