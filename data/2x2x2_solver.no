// Cube state is packed into a list of 6 faces with 4 elements each:
// [t, l, f, r, b, d], where face is [tl, tr, bl, br] looking to it:
// .--.--.
// |tl|tl|
// .--.--.
// |bl|br|
// .--.--.

// Unwrapped as following:
//   ww
//   ww
// ooggrrbb
// ooggrrbb
//   yy
//   yy

solvedState = ['wwww', 'oooo', 'gggg', 'rrrr', 'bbbb', 'yyyy']

r = s {
    [[t1, t2, t3, t4], l, [f1, f2, f3, f4], [r1, r2, r3, r4], [b1, b2, b3, b4], [d1, d2, d3, d4]] = s
    [[t1, f2, t3, f4], l, [f1, d2, f3, d4], [r3, r1, r4, r2], [t4, b2, t2, b4], [d1, b3, d3, b1]]
}

rr = s {
    [[t1, t2, t3, t4], l, [f1, f2, f3, f4], [r1, r2, r3, r4], [b1, b2, b3, b4], [d1, d2, d3, d4]] = s
    [[t1, b3, t3, b1], l, [f1, t2, f3, t4], [r2, r4, r1, r3], [d4, b2, d2, b4], [d1, f2, d3, f4]]
}

r2 = s {
    [[t1, t2, t3, t4], l, [f1, f2, f3, f4], [r1, r2, r3, r4], [b1, b2, b3, b4], [d1, d2, d3, d4]] = s
    [[t1, d2, t3, d4], l, [f1, b3, f3, b1], [r4, r3, r2, r1], [f4, b2, f2, b4], [d1, t2, d3, t4]]
}

l = s {
    [[t1, t2, t3, t4], [l1, l2, l3, l4], [f1, f2, f3, f4], r, [b1, b2, b3, b4], [d1, d2, d3, d4]] = s
    [[b4, t2, b2, t4], [l3, l1, l4, l2], [t1, f2, t3, f4], r, [b1, d3, b3, d1], [f1, d2, f3, d4]]
}

lr = s {
    [[t1, t2, t3, t4], [l1, l2, l3, l4], [f1, f2, f3, f4], r, [b1, b2, b3, b4], [d1, d2, d3, d4]] = s
    [[f1, t2, f3, t4], [l2, l4, l1, l3], [d1, f2, d3, f4], r, [b1, t3, b3, t1], [b4, d2, b2, d4]]
}

l2 = s {
    [[t1, t2, t3, t4], [l1, l2, l3, l4], [f1, f2, f3, f4], r, [b1, b2, b3, b4], [d1, d2, d3, d4]] = s
    [[d1, t2, d3, t4], [l4, l3, l2, l1], [b4, f2, b2, f4], r, [b1, f3, b3, f1], [t1, d2, t3, d4]]
}

f = s {
    [[t1, t2, t3, t4], [l1, l2, l3, l4], [f1, f2, f3, f4], [r1, r2, r3, r4], b, [d1, d2, d3, d4]] = s
    [[t1, t2, l4, l2], [l1, d1, l3, d2], [f3, f1, f4, f2], [t3, r2, t4, r4], b, [r3, r1, d3, d4]]
}

fr = s {
    [[t1, t2, t3, t4], [l1, l2, l3, l4], [f1, f2, f3, f4], [r1, r2, r3, r4], b, [d1, d2, d3, d4]] = s
    [[t1, t2, r1, r3], [l1, t4, l3, t3], [f2, f4, f1, f3], [d2, r2, d1, r4], b, [l2, l4, d3, d4]]
}

f2 = s {
    [[t1, t2, t3, t4], [l1, l2, l3, l4], [f1, f2, f3, f4], [r1, r2, r3, r4], b, [d1, d2, d3, d4]] = s
    [[t1, t2, d2, d1], [l1, r3, l3, r1], [f4, f3, f2, f1], [l4, r2, l2, r4], b, [t4, t3, d3, d4]]
}

b = s {
    [[t1, t2, t3, t4], [l1, l2, l3, l4], f, [r1, r2, r3, r4], [b1, b2, b3, b4], [d1, d2, d3, d4]] = s
    [[r2, r4, t3, t4], [t2, l2, t1, l4], f, [r1, d4, r3, d3], [b3, b1, b4, b2], [d1, d2, l1, l3]]
}

br = s {
    [[t1, t2, t3, t4], [l1, l2, l3, l4], f, [r1, r2, r3, r4], [b1, b2, b3, b4], [d1, d2, d3, d4]] = s
    [[l3, l1, t3, t4], [d3, l2, d4, l4], f, [r1, t1, r3, t2], [b2, b4, b1, b3], [d1, d2, r4, r2]]
}

b2 = s {
    [[t1, t2, t3, t4], [l1, l2, l3, l4], f, [r1, r2, r3, r4], [b1, b2, b3, b4], [d1, d2, d3, d4]] = s
    [[d4, d3, t3, t4], [r4, l2, r2, l4], f, [r1, l3, r3, l1], [b4, b3, b2, b1], [d1, d2, t2, t1]]
}

u = s {
    [[t1, t2, t3, t4], [l1, l2, l3, l4], [f1, f2, f3, f4], [r1, r2, r3, r4], [b1, b2, b3, b4], d] = s
    [[t3, t1, t4, t2], [f1, f2, l3, l4], [r1, r2, f3, f4], [b1, b2, r3, r4], [l1, l2, b3, b4], d]
}

ur = s {
    [[t1, t2, t3, t4], [l1, l2, l3, l4], [f1, f2, f3, f4], [r1, r2, r3, r4], [b1, b2, b3, b4], d] = s
    [[t2, t4, t1, t3], [b1, b2, l3, l4], [l1, l2, f3, f4], [f1, f2, r3, r4], [r1, r2, b3, b4], d]
}

u2 = s {
    [[t1, t2, t3, t4], [l1, l2, l3, l4], [f1, f2, f3, f4], [r1, r2, r3, r4], [b1, b2, b3, b4], d] = s
    [[t4, t3, t2, t1], [r1, r2, l3, l4], [b1, b2, f3, f4], [l1, l2, r3, r4], [f1, f2, b3, b4], d]
}

d = s {
    [t, [l1, l2, l3, l4], [f1, f2, f3, f4], [r1, r2, r3, r4], [b1, b2, b3, b4], [d1, d2, d3, d4]] = s
    [t, [l1, l2, b3, b4], [f1, f2, l3, l4], [r1, r2, f3, f4], [b1, b2, r3, r4], [d3, d1, d4, d2]]
}

dr = s {
    [t, [l1, l2, l3, l4], [f1, f2, f3, f4], [r1, r2, r3, r4], [b1, b2, b3, b4], [d1, d2, d3, d4]] = s
    [t, [l1, l2, f3, f4], [f1, f2, r3, r4], [r1, r2, b3, b4], [b1, b2, l3, l4], [d2, d4, d1, d3]]
}

d2 = s {
    [t, [l1, l2, l3, l4], [f1, f2, f3, f4], [r1, r2, r3, r4], [b1, b2, b3, b4], [d1, d2, d3, d4]] = s
    [t, [l1, l2, r3, r4], [f1, f2, b3, b4], [r1, r2, l3, l4], [b1, b2, f3, f4], [d4, d3, d2, d1]]
}

//   ww
//   ww
// ooggrrbb
// ooggrrbb
//   yy
//   yy
format = s {
    toColor = c -> match [c] {
        'w' => 'â¬œ',
        'o' => 'ðŸŸ§',
        'g' => 'ðŸŸ©',
        'r' => 'ðŸŸ¥',
        'b' => 'ðŸŸ¦',
        'y' => 'ðŸŸ¨',
    }
    [[t1, t2, t3, t4], [l1, l2, l3, l4], [f1, f2, f3, f4], [r1, r2, r3, r4], [b1, b2, b3, b4], [d1, d2, d3, d4]] = s
        .map(f -> f
            .map(c -> toColor(c))
            .flat()
        )
    [
        ..'    ',   t1, t2,             ..'\n',
        ..'    ',   t3, t4,             ..'\n',
        l1, l2, f1, f2, r1, r2, b1, b2, ..'\n',
        l3, l4, f3, f4, r3, r4, b3, b4, ..'\n',
        ..'    ',   d1, d2,             ..'\n',
        ..'    ',   d3, d4,
    ]
}

turns = [
    [r,  "R" ],
    [rr, "R'"],
    [r2, "R2"],
    [l,  "L" ],
    [lr, "L'"],
    [l2, "L2"],
    [f,  "F" ],
    [fr, "F'"],
    [f2, "F2"],
    [b,  "B" ],
    [br, "B'"],
    [b2, "B2"],
    [u,  "U" ],
    [ur, "U'"],
    [u2, "U2"],
    [d,  "D" ],
    [dr, "D'"],
    [d2, "D2"],
]

execute = (state, seq) {
    seq
        .split(' '.to(C))
        .map(t -> match t {
            "R"  => r,
            "R'" => rr,
            "R2" => r2,
            "L"  => l,
            "L'" => lr,
            "L2" => l2,
            "F"  => f,
            "F'" => fr,
            "F2" => f2,
            "B"  => b,
            "B'" => br,
            "B2" => b2,
            "U"  => u,
            "U'" => ur,
            "U2" => u2,
            "D"  => d,
            "D'" => dr,
            "D2" => d2,
        })
        .reduce(state, (s, t) -> t(s))
}

isEffectiveMove = (turns, move) {
    //println(turns, move)
    match [turns, move] {
        [[.., [a, ..]], [.., b]] => a != b,
        _ => True
    }
}

solve = (s, mDepth) {
    visitedStates = []
    lastDepthStates = [[[], s]]

    range(0, mDepth).map({
        lastDepthStates = lastDepthStates
            .map([sTurns, sState] {
                turns
                    .filter([_, tName] -> isEffectiveMove(sTurns, tName))
                    .map([turnF, tName] -> [[..sTurns, tName], turnF(sState)])
            })
            .flat()
        a = lastDepthStates.filter([st, sol] -> sol == solvedState)
        match a.len() > 0 { True => println('result:', a.at(0).at(0).join(' ').flat()) }

        visitedStates = (visitedStates + lastDepthStates).unique([_, st] -> st)
        println('depth states: ' + visitedStates.len().to([C]))
    })
    none()
}

main = {
    scramble = execute(solvedState, args().at(1))
    println('scramble:\n' + format(scramble))
    solve(scramble, args().at(0).to(I))
}
